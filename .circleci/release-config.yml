# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

executors:
  linux_x64_executor: # declares a reusable executor
    docker:
      - image: secretflow/release-ci:latest
    resource_class: 2xlarge
    parameters:
      python_ver:
        type: string
    shell: /bin/bash --login -eo pipefail
  linux_aarch64_executor:
    docker:
      - image: secretflow/release-ci-aarch64:latest
    resource_class: arm.2xlarge
    parameters:
      python_ver:
        type: string
    shell: /bin/bash --login -eo pipefail


commands:
  build_and_upload:
    parameters:
      python_ver:
        type: string
    steps:
      - checkout
      - run:
          name: "build package and publish"
          command: |
            conda create -n build python=<< parameters.python_ver >> -y
            conda activate build

            python3 setup.py bdist_wheel
            python3 setup.py clean
            python3 setup.py bdist_wheel --lite

            ls dist/*.whl
            python3 -m pip install twine
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  linux_publish:
    parameters:
      python_ver:
        type: string
      executor:
        type: string
    executor: <<parameters.executor>>
    steps:
      - checkout
      - build_and_upload:
          python_ver: <<parameters.python_ver>>
  macOS_arm64_publish:
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.large.gen1
    parameters:
      python_ver:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install cmake ninja libomp wget bazelisk
      - run:
          name: Install Miniconda
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init bash zsh
      - run:
          name: "build package and publish"
          command: |
            conda create -n build python=<< parameters.python_ver >> -y
            conda activate build

            python3 setup.py bdist_wheel
            python3 setup.py clean
            python3 setup.py bdist_wheel --lite

            ls dist/*.whl
            python3 -m pip install twine
            python3 -m twine upload -r pypi -u __token__ -p ${PYPI_TWINE_TOKEN} dist/*.whl
  docker_image_publish:
    docker:
      - image: cimg/deploy:2023.06.1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            # Install miniconda
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
            bash Miniconda3-latest-Linux-x86_64.sh -b

            # get version first
            printf "from datetime import date\ntoday = date.today()\ndstr = today.strftime(\"%%Y%%m%%d\")\n__version__ = __version__.replace(\"\$\$DATE\$\$\", dstr)\nprint(__version__)" >> secretflow/version.py
            VERSION=$(~/miniconda3/bin/python secretflow/version.py)

            # restore changed file
            git checkout secretflow/version.py
            docker buildx create --name python3.10 --platform linux/arm64,linux/amd64 --use
            # login docker
            docker login -u secretflow -p ${DOCKER_DEPLOY_TOKEN}

            # Build base image
            BASE_IMAGE=$(head -1 docker/release/python.Dockerfile|tr -d ' #')

            docker buildx build --platform linux/arm64,linux/amd64 -f docker/release/python.Dockerfile -t $BASE_IMAGE --push .

            # Build image
            cd docker/release
            bash ./build.sh -l -v ${VERSION}

            # login docker - aliyun
            docker login -u ${ALIYUN_DOCKER_USERNAME} -p ${ALIYUN_DOCKER_PASSWORD} secretflow-registry.cn-hangzhou.cr.aliyuncs.com

            SF_IMAGE=secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-anolis8
            SF_LITE_IMAGE=secretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8

            # secretflow-anolis8:${VERSION}
            SF_IMAGE_VERSION=${SF_IMAGE}:${VERSION}

            docker buildx build --platform linux/arm64,linux/amd64 -f anolis.Dockerfile . -t ${SF_IMAGE_VERSION} --build-arg sf_version=${VERSION} \
              --build-arg config_templates="$(cat config_templates.yml)" --build-arg deploy_templates="$(cat deploy_templates.yml)" \
              --build-arg comp_list="$(cat comp_list.json)" --build-arg translation="$(cat translation.json)" . --push

            # secretflow-anolis8:latest
            SF_IMAGE_LATEST=${SF_IMAGE}:latest

            docker buildx build --platform linux/arm64,linux/amd64 -f anolis.Dockerfile . -t ${SF_IMAGE_LATEST} --build-arg sf_version=${VERSION}
              --build-arg config_templates="$(cat config_templates.yml)" --build-arg deploy_templates="$(cat deploy_templates.yml)" \
              --build-arg comp_list="$(cat comp_list.json)" --build-arg translation="$(cat translation.json)" . --push


            # secretflow-lite-anolis8:${VERSION}
            SF_LITE_IMAGE_VERSION=${SF_LITE_IMAGE}:${VERSION}

            docker buildx build --platform linux/arm64,linux/amd64 -f anolis-lite.Dockerfile . -t ${SF_LITE_IMAGE_VERSION} --build-arg sf_version=${VERSION} \
              --build-arg config_templates="$(cat config_templates.yml)" --build-arg deploy_templates="$(cat deploy_templates.yml)" \
              --build-arg comp_list="$(cat comp_list.json)" --build-arg translation="$(cat translation.json)" . --push

            # secretflow-anolis8:latest
            SF_LITE_IMAGE_LATEST=${SF_LITE_IMAGE}:latest

            docker buildx build --platform linux/arm64,linux/amd64 -f anolis-lite.Dockerfile . -t ${SF_LITE_IMAGE_LATEST} --build-arg sf_version=${VERSION} \
              --build-arg config_templates="$(cat config_templates.yml)" --build-arg deploy_templates="$(cat deploy_templates.yml)" \
              --build-arg comp_list="$(cat comp_list.json)" --build-arg translation="$(cat translation.json)" . --push


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  publish:
    jobs:
      - linux_publish:
          matrix:
            parameters:
              python_ver: ["3.9", "3.10", "3.11"]
            executor: [ "linux_x64_executor", "linux_aarch64_executor" ]
          filters:
            tags:
              only: /.*/
      - macOS_arm64_publish:
          matrix:
            parameters:
              python_ver: ["3.9", "3.10", "3.11"]
          filters:
            tags:
              only: /.*/
      - docker_image_publish:
          requires:
            - linux_publish
          filters:
            tags:
              only: /.*/
